#test
server.port=8090
#server.port=9010

logging.level.com.ronglian.mapper=info
#===============================接口认证拦截开关=======================================
sign.interceptor.enterance=on
#sign.interceptor.enterance=off
#===============================拦截器放行url===========================================
spring.datasource.name=imonitor
spring.datasource.url = jdbc:mysql://172.17.101.138:3306/imonitor?useSSL=true
spring.datasource.username = root
spring.datasource.password = Pass@1234
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#----------------------------------数据库连接池配置----------------------------
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.initial-size=20
spring.datasource.druid.min-idle=20
spring.datasource.druid.max-active=50
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
#检测连接是否有效的sql
spring.datasource.druid.validation-query=SELECT 1
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.test-on-borrow=true
spring.datasource.druid.test-on-return=true
# PSCache Mysql下建议关闭
spring.datasource.druid.pool-prepared-statements=false
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=-1
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.use-global-data-source-stat=true
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

#-----------------------------------------mybatis配置--------------------------------
#entity扫描的包名
mybatis.type-aliases-package=com.ronglian.model
#开启MyBatis的二级缓存
mybatis.configuration.cache-enabled=true


##===============================redis config=======================================
## 自定义属性，redis服务类型（全部小写）：单机:standalone，主备:sentinel，集群:cluster
#customer.redis.deploy=standalone
# Redis数据库索引（默认为0）
spring.redis.database=6
# Redis服务器地址
spring.redis.host=172.17.101.140
# Redis端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接超时时间（毫秒）
spring.redis.timeout=3600
# 连接池最大连接数（使用负值表示没有限制），默认8个
spring.redis.pool.max-active=8
# 获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接，默认8个
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接，默认0
spring.redis.pool.min-idle=0


##===============================session 共享=======================================
spring.session.store-type=redis

#===============================quartz 定时任务=======================================
#----------------------------调度器属性-------------------------------------
#调度标识名 集群中每一个实例都必须使用相同的名称
spring.quartz.properties.org.quartz.scheduler.instanceName=clusteredScheduler
#ID设置为自动获取 每一个必须不同
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO

#----------------------------JobStore-------------------------------------
# 信息保存时间 默认值60秒   
spring.quartz.properties.org.quartz.jobStore.misfireThreshold = 60000
#数据保存方式为数据库持久化
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
#数据库代理类，一般org.quartz.impl.jdbcjobstore.StdJDBCDelegate可以满足大部分数据库
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#数据库别名 随便取  
spring.quartz.properties.org.quartz.jobStore.dataSource = imonitor
#表的前缀，默认QRTZ_
spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_
#是否加入集群，研发环境为false,测试/生产环境为true
#spring.quartz.properties.org.quartz.jobStore.isClustered=false
spring.quartz.properties.org.quartz.jobStore.isClustered=true
#调度实例失效的检查时间间隔
spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval=2000
#JobDataMaps是否都为String类型
spring.quartz.properties.org.quartz.jobStore.useProperties=false

#----------------------------ThreadPool-------------------------------------
#线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
#指定线程数，至少为1（无默认值）(一般设置为1-100直接的整数合适) 
spring.quartz.properties.org.quartz.threadPool.threadCount=50
#设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）
spring.quartz.properties.org.quartz.threadPool.threadPriority=5
#spring.quartz.properties.org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

#----------------------------数据源配置-------------------------------------
#数据库引擎  
spring.quartz.properties.org.quartz.dataSource.imonitor.driver=${spring.datasource.driver-class-name} 
#数据库连接  
spring.quartz.properties.org.quartz.dataSource.imonitor.url=${spring.datasource.url}  
#数据库用户  
spring.quartz.properties.org.quartz.dataSource.imonitor.user=${spring.datasource.username}  
#数据库密码  
spring.quartz.properties.org.quartz.dataSource.imonitor.password=${spring.datasource.password} 
#允许最大连接  
spring.quartz.properties.org.quartz.dataSource.imonitor.maxConnections=100  
#验证查询sql,可以不设置  
spring.quartz.properties.org.quartz.dataSource.imonitor.validationQuery=select 0 from dual 
#-------------------------------外部接口配置---------------------------------------------
#苏州台点击数接口
imoniter.interface.suzhou.url=https://interface.csztv.com/CBFX/ksz/zixun/getClicks
#imonitor转载接口
imoniter.interface.nlp.imonitornlpurl=http://49.4.1.140:8090/nlp/originalArticles

imoniter.interface.pagerank.url=http://49.4.49.174:8888/getPageRank

#苏州台文章分类计算服务地址
imonitor.article.classification.url = http://114.116.52.31:1240/mlableClassifier

imonitor.elasticsearch.clusterName=sbs
imonitor.elasticsearch.host=172.17.101.141
imonitor.elasticsearch.port=9300
imonitor.elasticsearch.hosts=172.17.101.141:9200,172.17.101.142:9200,172.17.101.143:9200,172.17.101.144:9200,172.17.101.145:9200

imoniter.interface.nlp.plagiarism=http://49.4.1.140:8090/nlp/originalArticles

imoniter.interface.nlp.commentanalysis=http://49.4.1.140:8090/commentAnalysis/sendComment

#imoniter.interface.nlp.commentanalysis=http://10.50.1.201:8176/commentAnalysis/sendComment

imoniter.interface.comment.suzhou.url=https://interface.csztv.com/CBFX/ksz/zixun/getComments

#imonitor api key(密钥)
imonitor.api.key=HI8i921&
#============== kafka ===================
#kafka.consumer.zookeeper.connect=10.93.21.21:2181
#kafka.consumer.servers=10.93.21.21:9092
#kafka.consumer.enable.auto.commit=true
#kafka.consumer.session.timeout=6000
#kafka.consumer.auto.commit.interval=100
#kafka.consumer.auto.offset.reset=latest
#kafka.consumer.topic=test
#kafka.consumer.group.id=test
#kafka.consumer.concurrency=10

#kafka.producer.servers=10.93.21.21:9092
#kafka.producer.retries=0
#kafka.producer.batch.size=4096
#kafka.producer.linger=1
#kafka.producer.buffer.memory=40960
